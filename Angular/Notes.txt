
<h2>
Angular 16 is used for this course. Released in 2023

old web frameworks : click on "add to cart" . webPage refreshes and loads everything again
modern frameworks: cart gets updated without much changes


<h2>
routing takes care of such things
component - a web page item 
angular application would have hierarchies, like many child scenarios



<h2>
Type Script is used for its type safety.

Type sctipt:
let name : string;
let age : int;

JavaScript
let name
let age


Javascript doesn't provide typesafety, but TS does



<h2> Major Typescript components
Static Typing
Interfaces
Class Properties
Public/Private accessibility


<h2>
Setting up development environment
Visual Studio Code
nodejs (nvm)
Angular CLI

install nodejs
https://github.com/coreybutler/nvm-windows/releases - download nvm-setup.exe
cmd > nvm install 18.10.0
after installing, 
cmd > nvm use 18.10.0
check nodejsversion: node -v or node --version



install angular
npm install -g @angular/cli@16.0.0

create new project: ng new joes-robot-shop

open project in vs code and start the app using: npm start

website will be opened at localhost:4200 (or another port number)

nice landing page will be shown on first view

initial looks:
index.html has <app-root> element which is a angular component. check its mapping in app.component.ts. like below. It has its own html, css page. 
over-write .html file with <h1> tag and notice it auto changes on website

## /src/app/app.component.ts
import { Component } from '@angular/core';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
}


##/./app.component.html
<h1> Hello World> 









<<h2>> Creating First Angular Component
cmd> ng generate compoenent home 

1)) home component is created at /src/app/home/  with the following files
1) home.component.css
2) home.component.html
3) home.component.spec.ts
4) home.component.ts
    - specifies the 'app-home' as home component selector, has the .html file used by home component
    - [styleUrls] is in array - multiple css files can be used

2)) /src/app/app.module.ts
   Home component is auto imported & declared in NgModule - CLI does this automatically, good thing
   In this file, declarations must be done otherwise app doesn't know where to look for our components

## /home/home.component.css
 blank

## /home/home.component.html
<p>home works!</p>


## /home/home.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HomeComponent } from './home.component';

describe('HomeComponent', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ HomeComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(HomeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


## /home/home.component.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

}

## /src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { HomeComponent } from './home/home.component';

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }









<<h2>> Application prefix for components

in /home/component.ts
selector: 'app-home' is created by CLI. THe prrefix app comes from /angular.json file, like below.

"prefix": "app",

update the prefix value to "bot" and observe the new components will have prefix as bot instead of home

after updating "prefix": "bot", and deleting home component. regenerate the home component and notice the change below

## /home/home.component.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'bot-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})

Prefix should be always unique, even if 3rd party packages are used. Angular reserved keywords shouldn't be used for prefix.








<<h2>> Using Inline styles

1) Template, style are using inline html, css. so, .html & .css file of 'bot-home' component can be deleted.
2) Inline template, style is not preferred unless its just 1 oe 2 lines of code. 
3) This is just to understand, inline is also possible

import { Component, OnInit } from '@angular/core';
@Component({
  selector: 'bot-home',
  template: `<p> Inline home works </p>`,
  styles: [`
    p{
      color:blue;
    }
  `],
})









<<h2>> Accessing and Displaying Images
Angular.json will have assets array

"assets": [
              "src/favicon.ico",
              "src/assets"
            ],

1. any images or static files path can be mentioned here and referenced in code
2. Apart from src/, new paths can be added to project folder and added to assets array
3. while referencing in code, directly use /assets
  3.1 HTML ex: <img src="/assets/images/robot-parts/torso-gauged.png" alt="Robot Torsos" />
  3.2 CSS ex:   background-image: url("/assets/images/hero-banner.png");


## /src/home/home.component.html
<div class="container">
  <div class="hero"></div>

  <div class="promoted">
    <img src="/assets/images/robot-parts/head-friendly.png" alt="Friendly Robot Head" />
    <div class="promo-text">
      <div class="promo-main-text">DISPELL THE ROBOT APOCALYPSE MYTH</div>
      <div class="promo-sub-text cta">
        <div>SAVE 20% ON OUR FRIENDLIEST</div>
        <div>ROBOT HEADS</div>
      </div>
    </div>
    <img src="/assets/images/robot-parts/head-big-eye.png" alt="Big Eye Head" />
  </div>

  <ul class="robot-parts-cta">
    <li>
      <a class="part">
        <img src="/assets/images/robot-parts/head-shredder.png" alt="Robot Heads" />
        <div>ROBOT HEADS</div>
      </a>
    </li>
    <li>
      <a class="part">
        <img src="/assets/images/robot-parts/arm-articulated-claw.png" alt="Robot Arms" />
        <div>ROBOT ARMS</div>
      </a>
    </li>
    <li>
      <a class="part">
        <img src="/assets/images/robot-parts/torso-gauged.png" alt="Robot Torsos" />
        <div>ROBOT TORSOS</div>
      </a>
    </li>
    <li>
      <a class="part">
        <img src="/assets/images/robot-parts/base-spring.png" alt="Robot Bases" />
        <div>ROBOT BASES</div>
      </a>
    </li>
  </ul>

  <div class="white-paper">
    <img src="/assets/images/robot-apocalypse.png" alt="Robot Apocalyse" />
    <div class="text">
      <div>
        <div class="header-text cta">Will they kill us all?</div>
        <div class="sub-text">
          <p>10 Myths About the</p>
          <p>Robot Apocalyse</p>
        </div>
      </div>
      <div class="large-text">WHITE PAPER</div>
      <a href="" class="learn-more">Learn More</a>
    </div>
  </div>
</div>



## /src/home/home.component.css
.container {
  display: flex;
  flex-direction: column;
}

.hero {
  background-image: url("/assets/images/hero-banner.png");
  background-repeat: no-repeat;
  height: 300px;
  background-size: cover;
  background-position: center center;
  text-align: center;
  margin-left: -8px;
  margin-right: -8px;
}

.promoted {
  display: flex;
  justify-content: space-between;
  margin: 25px;
  border-top: 2px solid #888;
  border-bottom: 2px solid #888;
  padding: 10px 150px 10px 150px;
}

.promoted img {
  width: 150px;
  height: 150px;
}

.promo-text {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  margin: 40px 0 40px 0;
}

.promo-main-text {
  font-size: 24px;
  text-align: center;
}

.promo-sub-text {
  font-size: 20px;
  text-align: center;
}

.robot-parts-cta {
  display: flex;
  justify-content: space-between;
  margin: 0px 100px 25px 100px;
  padding: 10px 0;
}

.part {
  display: flex;
  flex-direction: column;
  font-size: 18px;
  text-align: center;
  cursor: pointer;
}

.part img {
  width: 180px;
  margin-bottom: 10px;
  padding: 10px;
  background-color: #888;
}

.white-paper {
  display: flex;
  height: 100%;
  margin: 0 25px;
}

.white-paper img {
  width: 75%;
}

.white-paper .text {
  display: flex;
  width: 25%;
  flex-direction: column;
  background-color: #333;
  text-align: center;
  justify-content: space-between;
}

.white-paper .header-text {
  margin-top: 50px;
  font-size: 30px;
}

.white-paper .sub-text {
  font-size: 20px;
  color: #5cadd2;
  margin-top: 10px;
  padding: 0 15%;
}

.white-paper .sub-text p {
  margin: 0;
}

.white-paper .large-text {
  border-top: 2px solid #666;
  border-bottom: 2px solid #666;
  margin-top: -50px;
  padding: 20px 0;
  font-size: 35px;
  color: #fff;
}

.white-paper .learn-more {
  background-color: #d25ca1;
  color: white;
  padding: 15px 25px;
  text-decoration: none;
}










<<h2>> Component Life Cycle hooks

These are special methods that Angular calls at specific points in a component's lifeâ€”from creation to destruction. They allow developers to tap into key moments to run custom logic, such as initializing data, reacting to changes, or cleaning up resources.

THey get triggered at different phases of component existence, like Creation, Change detection, View rendering, Destruction


Commonly used hooks:
OnInit - logic initialization 
OnChanges
OnDestroy - to rpevent memory leaks


Example:  import the required interfaces and add them to method
import { Component, OnInit, OnDestroy } from '@angular/core';
@Component({
  selector: 'app-example',
  template: `<p>Example works!</p>`
})
export class ExampleComponent implements OnInit, OnDestroy {

  ngOnInit() {
    console.log('Component initialized');
  }

  ngOnDestroy() {
    console.log('Component destroyed');
  }
}

 the **Angluar Lifecycle Hooks with Examples** table 

+---------------------------+--------------------------------------------------+-----------------------------------------------+
|          Hook             |                    Purpose                       |              Example Use Case                 |
+---------------------------+--------------------------------------------------+-----------------------------------------------+
| ngOnInit()                | Called once after the component is initialized   | Fetch data from an API                        |
+---------------------------+--------------------------------------------------+-----------------------------------------------+
| ngOnChanges(changes)      | Called when any @Input() property changes        | React to changes in input-bound properties    |
+---------------------------+--------------------------------------------------+-----------------------------------------------+
| ngDoCheck()               | Called during every change detection run         | Implement custom change detection logic       |
+---------------------------+--------------------------------------------------+-----------------------------------------------+
| ngAfterContentInit()      | Called after content is projected                | Access projected content via <ng-content>     |
+---------------------------+--------------------------------------------------+-----------------------------------------------+
| ngAfterContentChecked()   | Called after every check of projected content    | Respond to changes in projected content       |
+---------------------------+--------------------------------------------------+-----------------------------------------------+
| ngAfterViewInit()         | Called after the componentâ€™s view is initialized| Access child components or DOM elements       |
+---------------------------+--------------------------------------------------+-----------------------------------------------+
| ngAfterViewChecked()      | Called after every check of the componentâ€™s view| Perform actions after view updates            |
+---------------------------+--------------------------------------------------+-----------------------------------------------+
| ngOnDestroy()             | Called just before the component is destroyed    | Clean up resources like subscriptions/timers  |
+---------------------------+--------------------------------------------------+-----------------------------------------------+













