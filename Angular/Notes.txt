
<h2>
Angular 16 is used for this course. Released in 2023

old web frameworks : click on "add to cart" . webPage refreshes and loads everything again
modern frameworks: cart gets updated without much changes


<h2>
routing takes care of such things
component - a web page item 
angular application would have hierarchies, like many child scenarios



<h2>
Type Script is used for its type safety.

Type sctipt:
let name : string;
let age : int;

JavaScript
let name
let age


Javascript doesn't provide typesafety, but TS does



<h2> Major Typescript components
Static Typing
Interfaces
Class Properties
Public/Private accessibility


<h2>
Setting up development environment
Visual Studio Code
nodejs (nvm)
Angular CLI

install nodejs
https://github.com/coreybutler/nvm-windows/releases - download nvm-setup.exe
cmd > nvm install 18.10.0
after installing, 
cmd > nvm use 18.10.0
check nodejsversion: node -v or node --version



install angular
npm install -g @angular/cli@16.0.0

create new project: ng new joes-robot-shop

open project in vs code and start the app using: npm start

website will be opened at localhost:4200 (or another port number)

nice landing page will be shown on first view

initial looks:
index.html has <app-root> element which is a angular component. check its mapping in app.component.ts. like below. It has its own html, css page. 
over-write .html file with <h1> tag and notice it auto changes on website

## /src/app/app.component.ts
import { Component } from '@angular/core';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
}


##/./app.component.html
<h1> Hello World> 









<<h2>> Creating First Angular Component
cmd> ng generate compoenent home 

1)) home component is created at /src/app/home/  with the following files
1) home.component.css
2) home.component.html
3) home.component.spec.ts
4) home.component.ts
    - specifies the 'app-home' as home component selector, has the .html file used by home component
    - [styleUrls] is in array - multiple css files can be used

2)) /src/app/app.module.ts
   Home component is auto imported & declared in NgModule - CLI does this automatically, good thing
   In this file, declarations must be done otherwise app doesn't know where to look for our components

## /home/home.component.css
 blank

## /home/home.component.html
<p>home works!</p>


## /home/home.component.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HomeComponent } from './home.component';

describe('HomeComponent', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ HomeComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(HomeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


## /home/home.component.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {

  constructor() { }

  ngOnInit(): void {
  }

}

## /src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { HomeComponent } from './home/home.component';

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }









<<h2>> Application prefix for components

in /home/component.ts
selector: 'app-home' is created by CLI. THe prrefix app comes from /angular.json file, like below.

"prefix": "app",

update the prefix value to "bot" and observe the new components will have prefix as bot instead of home

after updating "prefix": "bot", and deleting home component. regenerate the home component and notice the change below

## /home/home.component.ts
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'bot-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})

Prefix should be always unique, even if 3rd party packages are used. Angular reserved keywords shouldn't be used for prefix.








<<h2>> Using Inline styles

1) Template, style are using inline html, css. so, .html & .css file of 'bot-home' component can be deleted.
2) Inline template, style is not preferred unless its just 1 oe 2 lines of code. 
3) This is just to understand, inline is also possible

import { Component, OnInit } from '@angular/core';
@Component({
  selector: 'bot-home',
  template: `<p> Inline home works </p>`,
  styles: [`
    p{
      color:blue;
    }
  `],
})





