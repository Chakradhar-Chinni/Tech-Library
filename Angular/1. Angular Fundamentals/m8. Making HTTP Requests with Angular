<<h2>> Introduction


Observables
Proxy Setup 
GET request
POST Request




<<h2>> Observables

Sync Vs Async : 
1. synchronous (sync) operations execute one after another, blocking further execution until completion. Asynchronous (async) operations, on the other hand, allow the program to continue executing other tasks while the async operation runs in the background, often using callbacks or promises to handle the result later. 
2. On a HttpRequest main thread gets blocked till response is received from server on sync code. But on Async, main thread is not blocked as request is made using other thread

Promise: promises are Javascript way to handle async requests. on receiving response, promises return true or false

Data Streaming: Server sends larger files in smaller chunks of data to client, so multiple data chunks should be captured by client. [Ex: large files, live streaming]

Promise vs observable:
1. Promise finishes execution on receiving first chunk of data. not suitable for handling remaining chunks of data. 

observable pattern:
observable ==> Observer ==> Handler

1. Observable
  - This is event emitter, which emits 
  .Next()
  .Error()
  .Completion()

2. Observer
  - This is Event Listener i.e. subscriber to observable
    .Subscribe()

3. Handler
  - This is Event Handler
  .Next() 
  .Error()
  .Completion()




<<h2>> Setting up the Proxy server
from joes-robot-shop > m8 branch > download api-server folder
paste the api-server folder in /src/
cmd > cd api-server
cmd > npm install 
cmd > npm start

backedn server starts listening on localhost:8081

using this data server products will be displayed on web page


## /src/proxy.conf.json (create)
{
  "/api":{
    "target":"http://localhost:8081",
    "secure":false
  }
}



## /angular.json (update)

"development": {
              "browserTarget": "joes-robot-shop:build:development",
              "proxyConfig": "src/proxy.conf.json"
            }

